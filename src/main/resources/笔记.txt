shiro安全框架
	--数据库表设计（至少五张表）
		（1）人员表  、角色表 、权限表（对应的就是菜单表，什么权限对应可以使用什么菜单）
		人员-角色表（一个人可以拥有多个角色，一个角色也可以多个人拥有。所以多对多）
		角色-权限表（一个角色可以有多个权限，一个权限可以被多个角色拥有，所以多对多）
	--表分析（最简单配置）
	1.人员表：人员ID（一般主键），姓名，密码（一般存md5机密后的），状态，备注，创建人ID（添加当前记录的操作人），创建时间，所属公司ID。
	2.角色表：角色ID（一般主键），角色名，角色所在的企业ID，状态，备注，创建人ID，创建时间。
	3.权限表：权限ID（一般主键），权限名（菜单名称），父级菜单，菜单类型(M:菜单,B:按钮)，菜单状态，菜单URL，菜单排序，创建人ID，创建时间。
	4.人员-权限表：主键，人员ID，角色ID
	5.角色-权限表：主键，角色ID，权限ID
		
--数据库操作分析
	-- 登录判断
SELECT
	*
FROM
	yhjob_user
WHERE
	user_name =  'admin'
AND user_status = 'A'



-- 登录成功之后，需要查看权限id,对应的可以用的菜单名称，父级菜单ID，菜单URL

SELECT DISTINCT
	(c.id),
	c.auth_name,
	parent_id,
	auth_url
FROM
	yhjob_user a,
	yhjob_role b,
	yhjob_auth c,
	yhjob_map_user_role d,
	yhjob_map_role_auth e
WHERE
	a.user_name = 'admin'
AND a.id = d.user_id
AND d.role_id = b.id
AND b.id = e.role_id
AND e.auth_id = c.id

-- 获取角色ID
SELECT
	b.role_id
FROM
	yhjob_user a,
	yhjob_map_user_role b
WHERE
	a.id = b.user_id
AND a.user_name ='admin'


-- 权限id,对应的可以用的菜单名称，父级菜单ID，菜单URL ，菜单排序，所属公司
SELECT DISTINCT
	(c.id),
	c.auth_name,
	parent_id,
	auth_url,
	c.auth_order,
	a.corp_id corpId
FROM
	yhjob_user a,
	yhjob_role b,
	yhjob_auth c,
	yhjob_map_user_role d,
	yhjob_map_role_auth e
WHERE
	a.user_name = 'admin'
AND a.id = d.user_id
AND d.role_id = b.id
AND b.id = e.role_id
AND e.auth_id = c.id
ORDER BY
	c.parent_id,
	c.auth_order

======================swagger=====================================================
Swagger使用的注解及其说明：

@Api：用在类上，说明该类的作用。
@ApiOperation：注解来给API增加方法说明。
@ApiImplicitParams : 用在方法上包含一组参数说明。
@ApiImplicitParam：用来注解来给方法入参增加说明。
@ApiResponses：用于表示一组响应
@ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息
    code：数字，例如400
  message：信息，例如"请求参数没填好"
  response：抛出异常的类   

@ApiModel：描述一个Model的信息（一般用在请求参数无法使用@ApiImplicitParam注解进行描述的时候）
      @ApiModelProperty：描述一个model的属性
注意：@ApiImplicitParam的参数说明：
paramType：指定参数放在哪个地方
header：请求参数放置于Request Header，使用@RequestHeader获取
query：请求参数放置于请求地址，使用@RequestParam获取
path：（用于restful接口）-->请求参数的获取：@PathVariable
body：（不常用）
form（不常用）
name：参数名
dataType：参数类型
required：参数是否必须传
true | false
value：说明参数的意思
defaultValue：参数的默认值


=============================mongoDB===================================
spring-data-mongodb中的实体映射是通过MongoMappingConverter这个类实现的。它可以通过注释把java类转换为mongodb的文档。

它有以下几种注释：

@Id - 文档的唯一标识，在mongodb中为ObjectId，它是唯一的，通过时间戳+机器标识+进程ID+自增计数器（确保同一秒内产生的Id不会冲突）构成。

@Document - 把一个java类声明为mongodb的文档，可以通过collection参数指定这个类对应的文档。@Document(collection=”mongodb”) mongodb对应表

@DBRef - 声明类似于关系数据库的关联关系。ps：暂不支持级联的保存功能，当你在本实例中修改了DERef对象里面的值时，单独保存本实例并不能保存DERef引用的对象，它要另外保存，如下面例子的Person和Account。

@Indexed - 声明该字段需要索引，建索引可以大大的提高查询效率。

@CompoundIndex - 复合索引的声明，建复合索引可以有效地提高多字段的查询效率。

@GeoSpatialIndexed - 声明该字段为地理信息的索引。

@Transient - 映射忽略的字段，该字段不会保存到mongodb。

@PersistenceConstructor - 声明构造函数，作用是把从数据库取出的数据实例化为对象。该构造函数传入的值为从DBObject中取出的数据

 ==============================activeMQ================================================
 1.queue队列(P2P消息模型),生产者生产了一个消息，只能由一个消费者进行消费
 2.topic主题/广播(Pub/Sub消息模型),生产者生产了一个消息，可以由多个消费者进行消费
	
	Number Of Pending Messages：消息队列中待处理的消息
Number Of Consumers：消费者的数量
Messages Enqueued：累计进入过消息队列的总量
Messages Dequeued：累计消费过的消息总量